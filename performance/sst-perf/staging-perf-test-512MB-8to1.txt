# Data is set up to be 512MB per process when running in weak-scaling mode
# Reader must be run 1/8 of the size of the Writer code
#   e.g 16 writers, 2 readers
#   mpirun -n 16 /opt/adios2/bin/adios_iotest -a 1 -c staging-perf-test-512MB-8to1.txt -w -x staging-perf-test-bp4.xml -t -d 16
#   mpirun -n 2  /opt/adios2/bin/adios_iotest -a 2 -c staging-perf-test-512MB-8to1.txt -w -x staging-perf-test-bp4.xml -t -d 2

# Config file for Task 1 in a pipeline
#   - compute (sleep)
#   - Produce variables  a  b  c  d
#   - Write variables    a  b  c  d    to    stream_T1.bp

# Config file for Task 2 in a pipeline
#   - Read in variables  from Task 1 from stream_T1.bp
#     using a different decomposition
#   - compute (sleep)

group  io_T1
  # item  type    varname     N   [dim1 dim2 ... dimN  decomp1 decomp2 ... decompN]
  array   double  a           3    256    256    256      XYZ     1       1
  array   double  b           3    256    256    256      XYZ     1       1
  array   double  c           3    256    256    256      XYZ     1       1
  array   double  d           3    256    256    256      XYZ     1       1

group  io_T2_in
  # item  type    varname     N   [dim1 dim2 ... dimN  decomp1 decomp2 ... decompN]
  array   double  a           3    2048   256    256      XYZ     1       1
  array   double  b           3    2048   256    256      XYZ     1       1
  array   double  c           3    2048   256    256      XYZ     1       1
  array   double  d           3    2048   256    256      XYZ     1       1



# Task 1 actions
app 1
  steps  10
    # write all of io_T1 into stream_T1.bp
  write   stream_T1.bp    io_T1

# Task 2 actions
app 2
  steps   over stream_T1.bp
  # read stream_T1.bp using io_T2_in definition with a timeout
  read  next  stream_T1.bp    io_T2_in  5.0

  # Compute/Sleep only if read was successful:
  cond stream_T1.bp   sleep   2.0

